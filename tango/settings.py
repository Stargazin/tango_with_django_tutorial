"""
Django settings for tango project.

Generated by 'django-admin startproject' using Django 1.8.2.

For more information on this file, see
https://docs.djangoproject.com/en/1.8/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.8/ref/settings/
"""

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import os

#stores path to directory in which manage.py is stored.
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.8/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '114mgq(q!&4fq1phqrk1znw$xe_5zjo&mldtfym6n$xi4s9abw'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = (
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    #can be used to ('straightforwardly') store session information (sessionid) in model/db
    #specifically using django.contrib.sessions.models.Session model
    #https://docs.djangoproject.com/en/1.7/topics/http/sessions/#using-cached-sessions
    #^above gives a 'very fast' way of storing sessionids... maybe give it a try later?
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rango',
    #http://django-registration-redux.readthedocs.org/en/latest/quickstart.html#quickstart
    'registration',
)

MIDDLEWARE_CLASSES = (
    #creates sessionid cookie tokens
    #https://docs.djangoproject.com/en/1.7/topics/http/sessions/
    #If client-side cookies are the right approach for you then work through the following steps:
#You must first perform a check to see if the cookie you want exists. This can be done by checking the request parameter. The request.COOKIES.has_key('<cookie_name>') function returns a boolean value indicating whether a cookie <cookie_name> exists on the client?s computer or not.
#If the cookie exists, you can then retrieve its value - again via the request parameter - with request.COOKIES[]. The COOKIES attribute is exposed as a dictionary, so pass the name of the cookie you wish to retrieve as a string between the square brackets. Remember, cookies are all returned as strings, regardless of what they contain. You must therefore be prepared to cast to the correct type.
#If the cookie doesn?t exist, or you wish to update the cookie, pass the value you wish to save to the response you generate. response.set_cookie('<cookie_name>', value) is the function you call, where two parameters are supplied: the name of the cookie, and the value you wish to set it to.
#If you need more secure cookies, then use session based cookies:
#Make sure that MIDDLEWARE_CLASSES in settings.py contains ?django.contrib.sessions.middleware.SessionMiddleware?.
#Configure your session backend SESSION_ENGINE. See the official Django Documentation on Sessions for the various backend configurations.
#Check to see if the cookie exists via requests.sessions.get()
#Update or set the cookie via the session dictionary, requests.session['<cookie_name>']
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.security.SecurityMiddleware',
)

SESSION_EXPIRE_AT_BROWSER_CLOSE = False
#in seconds (below is 2 wks); more on cookies below
#http://eli.thegreenplace.net/2011/06/24/django-sessions-part-i-cookies/
#user python manage.py clearsessions to clear db that stores (session only?) cookies
#clear daily as a cron job
SESSION_COOKIE_AGE = 1209600

ROOT_URLCONF = 'tango.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'tango.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.8/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Internationalization
# https://docs.djangoproject.com/en/1.8/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.8/howto/static-files/

#this adds /static/ in front when you use template tag, ... i think
STATIC_URL = '/static/'
#this is why you do {% load staticfiles %} on html pages that need to serve staticfiles
#{% load static %} loads from STATIC_ROOT, which loads 'staticfiles' so you could use either (i think..)
STATIC_ROOT = 'staticfiles'

#run with above bar... (next to refactor and tools...)
#print(BASE_DIR) #/home/stargazin/tango_project

#careful, you use STATIC_DIRS instead of STATICFILES_DIRS alot.
STATICFILES_DIRS = (
    os.path.join(BASE_DIR, 'static'),
)

MEDIA_URL = '/media/'
#MEDIA_ROOT = (
#    os.path.join(BASE_DIR, 'media'),
#)
MEDIA_ROOT = '/home/stargazin/tango_project/media'

PASSWORD_HASHERS = (
    'django.contrib.auth.hashers.BCryptSHA256PasswordHasher',
    'django.contrib.auth.hashers.BCryptPasswordHasher',
    'django.contrib.auth.hashers.PBKDF2PasswordHasher',
    'django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher',
)

#registration-redux stuff
REGISTRATION_OPEN = True
#ACCOUNT_ACTIVATION_DAYS = 7
REGISTRATION_AUTO_LOGIN = True
LOGIN_REDIRECT_URL = '/rango/'
LOGIN_URL = '/accounts/login/'

print(BASE_DIR)
print(MEDIA_ROOT)